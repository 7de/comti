<style lang="scss">
.charging_title{
  float: left;
  width: 220rpx;
  font-size: 12px;
}
.cir{
 display: inline-block;
 margin-top:20rpx;
}
.cc{
  margin-top:-77px;
}

.time-padding{
  padding:0 8rpx;
  display: inline-block;
  text-align: center;
  width: 50rpx;
}
.round-box{
  width: 300rpx;
  height:300rpx;
  border-radius: 50%;
  background-color: red;
  margin: 0 auto;
  position: relative;
}
.round-sub{
  width: 250rpx;
  height:250rpx;
  line-height: 250rpx;
  border-radius: 50%;
  background-color: #fff;
  text-align: center;
  position: absolute;
  top:50%;
  left: 50%;
  transform: translate(-50%,-50%)
}
</style>

<template>
    <view class="container">
      <block wx:if="{{showLoading}}">
        <Loading />
      </block>
      <block wx:else >
        <view class="margin-top-30 zan-center" style="height:30px; padding:10px;">
          <progress percent="{{charg_longtime}}" active-mode="forwards" show-info active></progress>
        </view>
        <view class="zan-panel">
          <view class="zan-cell">
            <view class="zan-cell__bd"><view class="charging_title">设备编码</view><text class="">{{chargData.socketSeq}}</text></view>
          </view>
          <view class="zan-cell">
            <view class="zan-cell__bd"><view class="charging_title">充电时长</view><text class="time-padding">{{hours}}</text>:<text class="time-padding">{{minuters}}</text>:<text class="time-padding">{{seconds}}</text></view>
          </view>
          <view class="zan-cell">
            <view class="zan-cell__bd"><view class="charging_title">预计结束时间</view><text class="">{{charg_endtime}}</text></view>
          </view>
          <view class="zan-cell">
            <view class="zan-cell__bd"><view class="charging_title">预估金额</view><text class="zan-font-16 zan-c-red">￥{{money}}</text></view>
          </view>
        </view>
        <view style="margin:60rpx 40rpx 20rpx">
          <view>
            <button class="zan-btn zan-btn--primary" @tap="goHome">返回首页</button>
          </view>
          <view class="margin-top-30"><button class="zan-btn zan-btn--primary zan-btn--plain" @tap="goClose">结束充电</button></view>
        </view>
      </block>
    </view>
</template>
<script>
import wepy from 'wepy'
import api from '../../../common/api'
import page from '../../../common/page'
import Loading from '../../../components/loading'
const orderURL = 'server/'

export default class Charging extends wepy.page {
  config = {
    navigationBarTitleText: '充电中'
  }
  data = {
    showLoading: true,
    chargData: {},
    hours: '00',
    minuters: '00',
    seconds: '00',
    charg_timer: 0, // 定时上传订单状态
    timer: 0, // 计时器
    order_no: 0, // 充电订单号
    equip_no: 0, // 设备编码
    charg_activetime: 0, // 所用时间
    time: 0, // 充电时长
    charg_endtime: 0, // 预计结束时间
    charg_longtime: 0, // 环形精度条
    money: 0, // 预计金额
    progress_num: 0
  }
  components = {
    Loading
  }
  onLoad(option) {
    setTimeout(() => {
      this.showLoading = false
      this.$apply()
    }, 2000)
    this.order_no = option.orderNo
    this.time = option.time
    this.equip_no = option.equipNo
    this.timer = setInterval(() => {
      this.seconds++
      this.seconds = this.seconds < 10 ? '0' + this.seconds : this.seconds
      this.$apply()
      if (this.seconds === 60) {
        this.seconds = '00'
        this.minuters++
        this.minuters = this.minuters < 10 ? '0' + this.minuters : this.minuters
        this.$apply()
      }
      if (this.minuters === 60) {
        this.minuters = '00'
        this.hours++
        this.hours = this.hours < 10 ? '0' + this.hours : this.hours
        this.$apply()
      }
    }, 1000)
  }
  onShow() {
    // 查询订单基本信息
    this.creatData()
    // 30秒上传订单状态
    this.charg_timer = setInterval(() => {
      this.creatData()
    }, 30000)
  }
  methods = {
    goHome() {
      page.goHome()
    },
    // 结束充电
    goClose() {
      const _this = this
      wepy.showModal({
        title: '提示',
        content: '请确认是否结束充电？',
        success: function(res) {
          if (res.confirm) {
            wepy.showLoading({
              title: '正在关闭中...',
              mask: true
            })
            api.get(orderURL + 'chargeEnd/' + _this.order_no).then(res => {
              wepy.hideLoading()
              if (res.code === 0) {
                page.goHome()
              }
            })
          }
        }
      })
    }
  }

  // 时间戳转换
  formatDate(time) {
    const date = new Date(time)
    return api.formatDate(date, 'yyyy-MM-dd hh:mm')
  }

  // 查询充电数据
  creatData() {
    wepy.request({
      url: api.apiData.host + orderURL + 'queryOrderBrief/' + this.order_no,
      method: 'GET',
      success: res => {
        this.showLoading = false
        this.$apply()
        if (res.data.code === 0) {
          this.chargData = res.data.data
          this.money = api.fotmatMoney(this.chargData.predictFee)
          this.charg_endtime = this.formatDate(this.chargData.entTime)
          let _oldtime = this.chargData.actieTime
          let _time = api.formatDuring(_oldtime) // 转成时分秒
          let timeCount = _time.split(':')
          this.hours = timeCount[0]
          this.minuters = timeCount[1]
          this.seconds = timeCount[2]
          let _progresstime = _oldtime * 100 / api.formatMs(this.time)
          this.charg_longtime = _progresstime.toFixed(2)
          this.$apply()
        } else if (res.data.code === -1) {
          clearInterval(this.timer)
          clearInterval(this.charg_timer)
          wepy.showToast({
            title: res.data.msg,
            icon: 'success',
            duration: 2000,
            success: res => {
              page.goHome()
            }
          })
        }
      }
    })
  }
  onUnload() {
    clearInterval(this.timer)
    clearInterval(this.charg_timer)
    console.log('清除计时器')
  }
  onHide() {
    console.log('清空30秒')
    clearInterval(this.charg_timer)
  }
}
</script>
